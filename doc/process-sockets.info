This is process-sockets.info, produced by makeinfo version 6.1 from
process-sockets.texinfo.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Process Sockets: (process-sockets.info).  Process sockets for GNU Emacs
END-INFO-DIR-ENTRY


File: process-sockets.info,  Node: Top,  Next: Process Sockets,  Up: (dir)

1 Process Sockets
*****************

If you’ve ever had to perform process I/O in Emacs, you may have found
it to be quite unwieldy; I often found myself wanting just a simple
socket with buffered streams.  Now that Emacs 26 supports multiple
threads, such sockets are easier to implement.
* Menu:

* Pull Requests!::
* Process Sockets API::
* Buffered Streams API::
* Example::


File: process-sockets.info,  Node: Pull Requests!,  Next: Process Sockets API,  Up: Process Sockets

1.1 Pull Requests!
==================

Pull requests are greatly appreciated.


File: process-sockets.info,  Node: Process Sockets API,  Next: Buffered Streams API,  Prev: Pull Requests!,  Up: Process Sockets

1.2 Process Sockets API
=======================

Function            Short Description
--------------------------------------------------------------------------
ps-make-socket      Make a new process socket.
ps-close            Close the socket.
ps-input-stream     Return the socket’s buffered input stream.
ps-output-stream    Return the socket’s buffered output stream.
ps-read-sexp        Read an sexp from the socket.
ps-write-sexp       Write an sexp to the socket.
ps-read-char        Read a character from the socket.
ps-write-string     Write a string to the socket.
ps-drain-input      Return all available characters from the socket’s
                    input stream as a string.


File: process-sockets.info,  Node: Buffered Streams API,  Next: Example,  Prev: Process Sockets API,  Up: Process Sockets

1.3 Buffered Streams API
========================

Function                 Short Description
--------------------------------------------------------------------------
bs-make-buffered-stream  Make a new buffered stream.
bs-read                  Read/unread a character from the stream.
bs-write                 Write a string to the stream.
bs-drain-input           Return all available characters from the
                         stream’s buffer as a string.


File: process-sockets.info,  Node: Example,  Prev: Buffered Streams API,  Up: Process Sockets

1.4 Example
===========

Open up an ELISP REPL in Emacs, e.g.  via M-x ielm.

ELISP> (defvar my-proc (start-process "bash-proc1" (get-buffer-create "bash-proc1") "/bin/bash"))
my-proc

ELISP> (defvar my-sock (ps-make-socket my-proc))
my-sock

ELISP> (ps-write-string my-sock "PS1=\"\"; echo Hello world!\n")
nil

ELISP> (ps-drain-input my-sock)
"Hello world!\n"

ELISP>



Tag Table:
Node: Top94
Node: Process Sockets211
Ref: #process-sockets324
Node: Pull Requests!669
Ref: #pull-requests811
Node: Process Sockets API851
Ref: #process-sockets-api1032
Node: Buffered Streams API1683
Ref: #buffered-streams-api1859
Node: Example2274
Ref: #example2396

End Tag Table


Local Variables:
coding: utf-8
End:
