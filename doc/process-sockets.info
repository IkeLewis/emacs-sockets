This is process-sockets.info, produced by makeinfo version 6.5 from
process-sockets.texinfo.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Process Sockets: (process-sockets.info).  Process sockets for GNU Emacs
END-INFO-DIR-ENTRY


File: process-sockets.info,  Node: Top,  Next: Process Sockets,  Up: (dir)


1 Process Sockets
*****************

If you’ve ever had to perform process I/O in Emacs, you may have found
it to be quite unwieldy; I often found myself wanting just a simple
socket with buffered streams.  Now that Emacs 26 supports multiple
threads, such sockets are easier to implement.
* Menu:

* Installation::
* Quickstart rocket::
* Process Sockets API::
* Buffered Streams API::
* Unit testing::
* Benchmarking::
* Pull Requests!::


File: process-sockets.info,  Node: Installation,  Next: Quickstart rocket,  Up: Process Sockets

1.1 Installation
================

Once the API becomes stable, a recipe will likely be added to MELPA. In
that case, MELPA will be the preferred way to install.

For now, Cask may be used to manually build a bleeding edge version of
the package that can be locally installed by Emacs.

  1. Run cask package in a terminal to build the package.
  2. Run package-install-file from Emacs.

Alternatively, old school manual installation may be used.

  1. In your Emacs init file:

       a. Add the process-sockets directory to your load path.
       b. Include a line containing (require ’procces-sockets)

  2. Install the doc/process-sockets.info file.  See
     <https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Texinfo-documentation.html>


File: process-sockets.info,  Node: Quickstart rocket,  Next: Process Sockets API,  Prev: Installation,  Up: Process Sockets

1.2 Quickstart :rocket:
=======================

  1. Install via MELPA (or manually).
  2. Open up a REPL in Emacs via M-x ielm and try it out:

     ELISP> (require 'process-sockets)
     process-sockets

     ELISP> (defvar my-proc (start-process "bash-proc1"
                                           (get-buffer-create "bash-proc1")
                                           "/bin/bash"))
     my-proc

     ELISP> (defvar my-sock (ps-make-socket my-proc))
     my-sock

     ELISP> (ps-write-string my-sock "PS1=\"\"; echo Hello world!\n")
     nil

     ELISP> (ps-drain-input my-sock)
     "Hello world!\n"

     ELISP>


File: process-sockets.info,  Node: Process Sockets API,  Next: Buffered Streams API,  Prev: Quickstart rocket,  Up: Process Sockets

1.3 Process Sockets API
=======================

Function            Short Description
--------------------------------------------------------------------------
ps-make-socket      Make a new process socket.
ps-close            Close the socket.
ps-input-stream     Return the socket’s buffered input stream.
ps-output-stream    Return the socket’s buffered output stream.
ps-read-sexp        Read an sexp from the socket.
ps-write-sexp       Write an sexp to the socket.
ps-read-char        Read a character from the socket.
ps-write-string     Write a string to the socket.
ps-drain-input      Return all available characters from the socket’s
                    input stream as a string.


File: process-sockets.info,  Node: Buffered Streams API,  Next: Unit testing,  Prev: Process Sockets API,  Up: Process Sockets

1.4 Buffered Streams API
========================

Function                 Short Description
--------------------------------------------------------------------------
bs-make-buffered-stream  Make a new buffered stream.
bs-read                  Read/unread a character from the stream.
bs-write                 Write a string to the stream.
bs-drain-input           Return all available characters from the
                         stream’s buffer as a string.


File: process-sockets.info,  Node: Unit testing,  Next: Benchmarking,  Prev: Buffered Streams API,  Up: Process Sockets

1.5 Unit testing
================

TODO


File: process-sockets.info,  Node: Benchmarking,  Next: Pull Requests!,  Prev: Unit testing,  Up: Process Sockets

1.6 Benchmarking
================

TODO


File: process-sockets.info,  Node: Pull Requests!,  Prev: Benchmarking,  Up: Process Sockets

1.7 Pull Requests!
==================

Pull requests are greatly appreciated.



Tag Table:
Node: Top94
Node: Process Sockets211
Ref: #process-sockets324
Node: Installation730
Ref: #installation864
Node: Quickstart rocket1593
Ref: #quickstart-rocket1769
Node: Process Sockets API2351
Ref: #process-sockets-api2535
Node: Buffered Streams API3186
Ref: #buffered-streams-api3367
Node: Unit testing3782
Ref: #unit-testing3940
Node: Benchmarking3946
Ref: #benchmarking4098
Node: Pull Requests!4104
Ref: #pull-requests4239

End Tag Table


Local Variables:
coding: utf-8
End:
